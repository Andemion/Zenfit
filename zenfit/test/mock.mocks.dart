// Mocks generated by Mockito 5.4.4 from annotations
// in zenfit/test/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:zenfit/db/interfaces/exercise_database_interface.dart' as _i2;
import 'package:zenfit/models/exercises_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ExerciseDatabaseInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockExerciseDatabaseInterface extends _i1.Mock
    implements _i2.ExerciseDatabaseInterface {
  MockExerciseDatabaseInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int?> findExerciseIdByName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #findExerciseIdByName,
          [name],
        ),
        returnValue: _i3.Future<int?>.value(),
      ) as _i3.Future<int?>);

  @override
  _i3.Future<void> saveExerciseIfNotExists(_i4.Exercise? exercise) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveExerciseIfNotExists,
          [exercise],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.Exercise?> readExercise(int? id) => (super.noSuchMethod(
        Invocation.method(
          #readExercise,
          [id],
        ),
        returnValue: _i3.Future<_i4.Exercise?>.value(),
      ) as _i3.Future<_i4.Exercise?>);

  @override
  _i3.Future<List<_i4.Exercise>> readAllExercises() => (super.noSuchMethod(
        Invocation.method(
          #readAllExercises,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Exercise>>.value(<_i4.Exercise>[]),
      ) as _i3.Future<List<_i4.Exercise>>);

  @override
  _i3.Future<void> updateExercise(
    int? id,
    _i4.Exercise? exercise,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateExercise,
          [
            id,
            exercise,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> deleteExercise(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteExercise,
          [id],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
